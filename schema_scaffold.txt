CREATA A TABLE post

Manjaro Notice: grant permission first
Manjaro Notice: grant permission first

# create a post_table migration and a post controller
# Notice: createdAt & updatedAt is default in rails 7
# Manual|Intruction: rails g scaffold --help 
Ter: rails generate scaffold post author_id:integer title:string text:text commentsCounter:integer likesCounter:integer 

# send the post_table migration to create a table "post" in Database
Ter: rails db:migrate

# how to validate an attr :title (empty not permitted)
# Enter the class post
validates_presence_of :title

# rail shell for interacting with Database
Ter: rails console
>>: Post.first          #retrieve the first object (line) of the table post.

# created a transaction with a query to insert a new post into the posts table
>>: Post.create! title:"console", text:"Nice!"

# search with condition
>>: Post.where(created_at: Time.now.all_day)                # today
>>: Post.where(created_at: Time.now.yesterday.all_day)      # yesterday

# how to attach a new image into a post = use action_text
Ter: rails action_text:install
Ter: bundle                        #to get image_processing gem
Ter: rails db:migrate               
# inside post model, add
has_rich_text :content             # attr content configured
# inside html form, modify
form.text_area => form.rich_text_area

=============================================
#!# HOW TO USE SOME OTHER JavaScript FROM npm
=============================================
# We use a package "local-time" to localize the time of creation of a post.
Ter: ./bin/importmap pin local-time 
# In file 'app/javascript/application.js', add:
import LocalTime from 'local-time'
LocalTime.start()
# How to show how long was a post created.
# In html file, add:
<%= time_tag post.created_at, "data-local": "time-ago" %>
# Notice: this way is just use an cdn or an api (no download directly)
# We could see it in file 'importmap.rb'

# Now we download the JS package.
Ter: ./bin/importmap pin local-time --download
# everything is the same but not using the api 'local-time' any more.
# We could see it in file 'importmap.rb'

========= create class comment references to post =========
Ter: rails g resource comment post:references user_id:integer text:text
Ter: rails db:migrate
# in class post, add:
has_many :comments, foreign_key: 'post_id'
# in comment class, add:
belongs_to :post, foreign_key: "post_id" 

========= create class user =========
Ter: rails g scaffold user name:string photo:attachment bio:string postCounter:integer 
Ter: rails db:migrate

========= create class like : belongs to post and user =========
Ter: rails g resource like user:references post:references
Ter: rails db:migrate
#in class post, add:
has_many :comments, foreign_key: 'post_id'
#in class user, add:
has_many :likes, foreign_key: 'user_id'
#in like class, add:
belongs_to :user, foreign_key: 'user_id'
belongs_to :post, foreign_key: 'post_id' 

==============================================================
How to create a references for 2 existing tables user and post
Manual|Intruction: rails g scaffold --help 
===============================================================
# First remove a column 'author_id' from a table post
Ter: rails g migration remove_field_from_posts author_id:integer 
Ter: rails db:migrate

# Then add references
Ter: rails g migration add_references_to_posts user:references
# Inside db/migrate change from 1 to 2: (change "user_id" to "author_id")
1> add_reference :posts, :user, null: false, foreign_key: true
2> add_reference :posts, :author, null: false, foreign_key: {to_table: :users}
Ter: rails db:migrate 
# Then, inside models/user, add:
has_many :posts, foreign_key: :author_id
# Then, inside models/post add:
belongs_to :users, foreign_key: :author_id


======= MODIFY CONTROLLER ======================================
Add controller and controller unit_test to an existing model Like and Comment
Ter: rails g scaffold like user:references post:references -f --skip

======= RENAME COLUMN =========
Ter: rails g migration rename_column_users
In a new migrate file "rename_column_users", add:
rename_column :users, :postCounter, :posts_counter
Ter: rails db:migrate 

==== add default ==============
Ter: rails g migration add_default_users
In a new migrate file "add_default_users", add:
change_column :users, :posts_counter, :integer, default: 0
Ter: rails db:migrate 
